
// header files used in the program
#include <iostream> // handles input and output in c++ (predefined functions used - cin, cout)
#include <conio.h> // contains functions for console input/output (predefined functions used - getch(), khbit())
#include <windows.h> // used to access the Win32 API functions (predefined functions used - system(), Sleep())

using namespace std;


// constants used in the program
#define SCREEN_WIDTH 90 // width of the entire game screen (game-play space and the score/instruction panel)
#define SCREEN_HEIGHT 26 // height of the entire game screen
#define WIN_WIDTH 70 // width of the game-play space (the height of game-play space is same as the height of the entire game screen)


HANDLE console=GetStdHandle(STD_OUTPUT_HANDLE); // variable used to make changes to the console
COORD CursorPosition; // variable used to change cursor position in the console according to x and y coordinates


// globally declared simple variables and arrays
int enemyY[2]; //stores the y-coordinates of the 2 enemy crafts
int enemyX[2]; //stores the x-coordinates of the 2 enemy crafts
int enemyFlag[2]; // stores the existance of 2 enemy crafts (1-exist / 0-does not exist)
char craft[3][5]={{' ', ' ', 237, ' ', ' '}, {186, 233, 233, 233, 186}, {239, 233, 233, 233, 239}}; // design of player's space craft
int craftPos=WIN_WIDTH/2; // variable which stores the x-coordinate of player's space craft
int score=0; // variable which handles the game score (initial value is 0)
int bullets[20][4]; // stores the pair of x and y coordnates of the two bullets generated by the player's space craft (can store coordinates of 20 pairs of bullets)
int bIndex=0; // handles the first subscript of bullets[20][4] array
int lives=0; // initial life count is 0 and the maximum life count is 3


// Function prototype statements
void alignment(int, int);
void cursorInvisible();
void introScreen();
void drawBorder();
void genEnemy(int);
void drawEnemy(int);
void eraseEnemy(int);
void resetEnemy(int);
void genBullet();
void drawBullets();
void eraseBullets();
void moveBullet();
void eraseBullet(int);
void drawcraft();
void erasecraft();
int collision();
int bulletHit();
void gameover();
void updateScore();
void instructions();
void play();


int main(){
	system("mode con: cols=91 lines=27"); // changes command prompt size, console command used=mode con: cols=91 lines=27
	
	
	// makes the cursor invisible to make the game more attractive
	cursorInvisible();
	
	
	// Loads intro screen
	introScreen();
	
	
	// while loop executes again and again because the condition is 1-true always
	while(1){
		system("cls"); // clears the console, console command used=cls
		
		
		// displays the menu options in the console
		alignment(28, 8); // adjusts the alignment (x-coordinate=28 and y-coordinate=8)
		cout << " ------------------------------- ";
		alignment(28, 9);
		cout << " |        Space Shooter        | ";
		alignment(28, 10);
		cout << " ------------------------------- ";
		alignment(28, 12);
		cout << "1. Start Game";
		alignment(28, 13);
		cout << "2. Instructions";
		alignment(28, 14);
		cout << "3. Quit";
		alignment(28, 16);
		cout << "Select Option : ";
		char op=getchar(); // inputs the option number(1, 2 or 3)
		// if an invalid character in entered the menu is displayed again because the condition of the while loop is 1-true
		
		
		// calls the appropriate function according to the option entered by the user
		if(op=='1'){
			lives=0; // set initial life count to 0 and the maximum life count is 3
			play(); //the shooter game loads
		}else if(op=='2'){
			instructions(); // displays game instructions
		}else if(op=='3'){
			return 0; // terminates the program
		}
	}
}


// makes the cursor invisible
void cursorInvisible(){
	CONSOLE_CURSOR_INFO lpCursor;
	lpCursor.bVisible=0;
	lpCursor.dwSize=20;
	SetConsoleCursorInfo(console, &lpCursor);
}


// changes the position of the cursor according to the x and y coordinates passed to the function
void alignment(int x, int y){
	CursorPosition.X=x;
	CursorPosition.Y=y;
	SetConsoleCursorPosition(console, CursorPosition);
}


// loads intro screen
void introScreen(){
	alignment(40, 12); // adjusts the alignment (x-coordinate=40 and y-coordinate=12)
	cout << "G";
	Sleep(200); //pauses the program for 200 miliseconds
	cout << "R";
	Sleep(200);
	cout << "O";
	Sleep(200);
	cout << "U";
	Sleep(200);
	cout << "P";
	Sleep(200);
	cout << " 5";
	Sleep(200);
	cout << endl << endl;
	system("cls"); // clears the console, console command=cls
	alignment(38, 12);
	cout << "Loading game..." << endl;
	Sleep(1000); //pauses the program for 1000 miliseconds
}


void play(){
	craftPos=-2+WIN_WIDTH/2; // sets the initial position of the player's space craft (x-coordinate of the player's craft)
	score=0; // sets game score to 0
	enemyFlag[0]=1; //stores the existance of enemy craft 1 (1-exist, 0-does not exist)
	enemyFlag[1]=1; //stores the existance of enemy craft 2 (1-exist, 0-does not exist)
	enemyY[0]=enemyY[1]=4; // initial y-coordinates of two enemy crafts
	
	
	// assigns 0 for all the x and y coordinates of all 40 bulles (pairs of 20 bullets)
	for(int i=0; i<20; i++){
		bullets[i][0]=bullets[i][1]=0;
	}
	
	
	system("cls"); // clears the console
	
	
	drawBorder(); // draws the game border
	
	
	// generates x-coordinates of 2 enemy crafts randomly
	genEnemy(0); // generates the x-cordinate of enemy craft 1 randomly
	genEnemy(1); // generates the x-cordinate of enemy craft 1 randomly
	
	
	updateScore(); // displays the updated the score
	
	
	// displays the required information in the side panel
	alignment(WIN_WIDTH+5, 2);
	cout << "Space Shooter";
	alignment(WIN_WIDTH+6, 4);
	cout << "---------";
	alignment(WIN_WIDTH+6, 6);
	cout << "---------";
	alignment(WIN_WIDTH+6, 8);
	cout << "---------";
	alignment(WIN_WIDTH+6, 9); 
	cout << "Lives : " << (3-lives) << endl; // displays lives left
	alignment(WIN_WIDTH+6, 10);
	cout << "---------";
	alignment(WIN_WIDTH+7, 16);
	cout << "Control";
	alignment(WIN_WIDTH+7, 17);
	cout << "-------";
	alignment(WIN_WIDTH+2, 18);
	cout << " A Key - Left";
	alignment(WIN_WIDTH+2, 19);
	cout << " D Key - Right";
	alignment(WIN_WIDTH+2, 20);
	cout << " Spacebar = Shoot";
	
	
	alignment(25, 12);
	cout << "Press any key to start";
	getch(); //tells the console to wait for some time until a key is pressed
	alignment(25, 12);
	cout << "                      "; // deletes the message "Press any key to start" on the screen
	
	
	// handles the real game-play
	// since the condition of the while loop is 1 the game continues until the player press 'esc' key or until a collision happens
	while(1){
		// if condition which handles the keyboard input part of the game
		if(kbhit()){ //used to determine if a key has been pressed or not 
			char ch=getch(); // stores the pressed key in variable ch
			
			// moves space craft left
			if(ch=='a' || ch=='A'){ 
				if(craftPos>2){ // to keep craft inside the boundries without overlapping with the left boundry
					craftPos-=2; //2 is substracted from the x-coordinate of the player's space craft to shift space craft to left
				}
			}
			
			// moves space craft right
			if(ch=='d' || ch=='D'){
				if(craftPos < WIN_WIDTH-7){ // to keep craft inside the boundries without overlapping with the right boundry
					craftPos+=2; //2 is added to the x-coordinate of the player's space craft to shift space craft to right
				}
			}
			
			// generates 2 bullets from the space craft
			if(ch==32){ // ASCII 32 - Space key
				genBullet(); // determines the pair x and y coordinates of the 2 bullets generated from the space craft
			}
			
			// game ends if 'esc' key is pressed by the player and the main menu is displayed in the screen
			if(ch==27){ // ASCII 27 - Esc key
				break; // loop terminates and eventually function terminates and returns to the main function
			}
		}
		
		
		drawcraft(); // draws player's space craft
		drawEnemy(0); // draws enemy 1
		drawEnemy(1); // draws enemy 2
		drawBullets(); // draws bullets launched from the space craft
		
		
		// handles the collision between player's space craft and enemy crafts
		// 1 collision means 1 life lost, player has a maximum of 3 lives
		if(collision()==1){
			gameover(); // ends the game when all 3 lifes are lost
			return;
		}
		
		
		// handles the bullet hit part when a bullet hits an enemy craft
		if(bulletHit()==1){ // 1 is returned to the condtion if a bullet has hit any of the enemy crafts
			score++; // increases the score by 1
			updateScore(); // updates the score
		}
		
		
		Sleep(200); // pauses the program for 200 miliseconds
		erasecraft(); // erases the player's space craft from the current position letting it move to a new position (Left or Right)
		eraseEnemy(0); // erases enemy craft 1 from the current position letting it move down
		eraseEnemy(1); // erases enemy craft 2 from the current position letting it move down
		eraseBullets(); // erases all bullets from current position letting it move upwards
		moveBullet(); // moves all bullets to the new position
		
		
		if(enemyFlag[0]==1){ // if enemy craft 1 exists
			enemyY[0]+=1; //y-coordinate of enemy craft 1 increments by 1 (x-coordinate remains constant) - to move enemy craft 1 downwards
		}
		
		if(enemyFlag[1]==1){ // if enemy craft 2 exists
			enemyY[1]+=1; //y-coordinate of enemy craft 2 increments by 1 (x-coordinate remains constant) - to move enemy craft 2 downwards
		}
		
		
		// if enemy craft 1 y-coordinate is closer to lower border new enemy craft 1 is generated from the top
		if(enemyY[0]>SCREEN_HEIGHT-5){ 
			resetEnemy(0); // resets enemy craft 1
		}
		
		
		// if enemy craft 2 y-coordinate is closer to lower border new enemy craft 2 is generated from the top
		if(enemyY[1]>SCREEN_HEIGHT-5){
			resetEnemy(1); // resets enemy craft 2
		}
	}
}


// displays game instructions on the console
void instructions(){
	system("cls"); // clears the console
	
	// file handling used to open Instructions.txt file and display instructions of the game in the console
	FILE *f1;
	char c;
	f1=fopen("Instructions.txt", "r");
	int coordinateY=5;
	alignment(35, coordinateY);
	while((c=getc(f1))!=EOF){
		cout << c;
		if(c=='\n'){
			alignment(20, ++coordinateY);
		}
	}
	fclose(f1);
	
	
	getch(); //tells the console to wait for some time until a key is pressed
	// when any key is pressed the instructions screen dissappers and the main menu is displayed again
}


// draws the game borders
void drawBorder(){
	char ch=178; // assigns the character with ASCII value 176 to variable ch
	
	
	// draws the lower border
	for(int i=0; i<=SCREEN_WIDTH; i++){
		alignment(i, SCREEN_HEIGHT);
		cout << ch;
	}
	
	
	// draws the right and left border
	for(int i=0; i<SCREEN_HEIGHT; i++){
		alignment(0, i);
		cout << ch;
		alignment(SCREEN_WIDTH, i);
		cout << ch;
	}
	
	
	// draws the border which seperates the game-play space and instructions/score panel
	for(int i=0; i<SCREEN_HEIGHT; i++){
		alignment(WIN_WIDTH, i);
		cout << ch;
	}
}


// generates the x-cordinate of each enemy craft randomly
void genEnemy(int ind){
	enemyX[ind]=3+rand()%(WIN_WIDTH-10); // x-cordinate of enemy craft is generated randomly
}


// draws the player's space craft on screen
void drawcraft(){
	for(int i=0; i<3; i++){
		for(int j=0; j<5; j++){
			alignment(j+craftPos, i+22); // x-coordinate=j+craftPos and y-coordinate=(i+22)
			cout << craft[i][j]; // draws each character of the craft
		}
	}
}


// erases the player's space craft from the current position letting it move to a new position (Left or Right)
void erasecraft(){
	for(int i=0; i<3; i++){
		for(int j=0; j<5; j++){
			alignment(j+craftPos, i+22); // x-coordinate=j+craftPos and y-coordinate=(i+22)
			cout << " "; // prints a blank space in the position of every character used to design the space craft
		}
	}
}


// draws enemy craft
void drawEnemy(int ind){ // ind is either 0 or 1 ----> because two enemy crafts are generated at the same time
	if(enemyFlag[ind]==true){
		alignment(enemyX[ind], enemyY[ind]); // x-coordinate=enemyX[ind] and y-coordinate=enemyY[ind]
		cout << ".**.";
		alignment(enemyX[ind], enemyY[ind]+1);
		cout << "****";
		alignment(enemyX[ind], enemyY[ind]+2);
		cout << "****";
		alignment(enemyX[ind], enemyY[ind]+3);
		cout << ".**.";
	}
}


// erases enemy crafts
void eraseEnemy(int ind){
	if(enemyFlag[ind]==true){ // checks whether the enemy craft exists
		alignment(enemyX[ind], enemyY[ind]);
		cout << "    "; // add blank spaces to erase characters which creates the enemy craft
		alignment(enemyX[ind], enemyY[ind]+1);
		cout << "    ";
		alignment(enemyX[ind], enemyY[ind]+2);
		cout << "    ";
		alignment(enemyX[ind], enemyY[ind]+3);
		cout << "    ";
	}
}


// erases the current enemy craft if it is closer to lower border or a bullet has hit it
// and generates a new enemy craft from the upper border
void resetEnemy(int ind){
	eraseEnemy(ind); // erases the current enemy craft 
	enemyY[ind]=4; // y-coordinate of the new enemy craft is set to 4 again
	genEnemy(ind); // generates the x-cordinate of the new enemy craft randomly
}


// determines the pair x and y coordinates of the 2 bullets generated from the space craft
void genBullet(){
	bullets[bIndex][0]=22; // y-coordinate of 1st bullet
	bullets[bIndex][1]=craftPos; // x-coordinate of 1st bullet
	bullets[bIndex][2]=22; // y-coordinate of 2nd bullet
	bullets[bIndex][3]=craftPos+4; // x-coordinate of 2nd bullet
	
	bIndex++; // to store the pair of x and y coordinates of the next two bullets (can store coordinates of 20 pairs of bullets)
	
	if(bIndex==20){ // maximum bullets limit reached, reinitialization of the bullets[20][4] array is required
		bIndex=0; 
	}
}


// moves all bullets to the new position
void moveBullet(){
	for(int i=0; i<20; i++){ // all 20 bullets (10 pairs of bullets)
		// handles bullet 1
		if(bullets[i][0]>2){ // checks whether the bullet 1 has been launched
			bullets[i][0]--; // y-coordinate of bulles decrements (x-coordinate is a constant)
		}else{
			bullets[i][0]=0; // the y-coordinate remains 0 (bullet 1 has not been launched)
		}
		
		
		// handles bullet 2
		if(bullets[i][2]>2){ // checks whether the bullet 2 has been launched
			bullets[i][2]--; // y-coordinate of bulles decrements (x-coordinate is a constant)
		}else{
			bullets[i][2]=0; // the y-coordinate remains 0 (bullet 2 has not been launched)
		}
	}
}


// launched bullets are drawn
void drawBullets(){
	for(int i=0; i<20; i++){
		if(bullets[i][0]>1){ // condition is used to check the launched bullets
			alignment(bullets[i][1], bullets[i][0]); // x-coordinate=bullets[i][1] and y-coordinate=[i][0]
			cout << ".";
			alignment(bullets[i][3], bullets[i][2]); // x-coordinate=bullets[i][3] and y-coordinate=[i][2]
			cout << ".";
		}
	}
}


// erase bullets from current position letting them move up
void eraseBullets(){
	for(int i=0; i<20; i++){ // erases all 20 bullets (paris of 10 bullets) from current position
		if(bullets[i][0]>=1){ // checks whether the bullet pair exists
			alignment(bullets[i][1], bullets[i][0]);
			cout << " "; // erase bullet 1
			alignment(bullets[i][3], bullets[i][2]);
			cout << " "; // erase bullet 2
		}
	}
}


// erases the pair of bullets which hits an enemy craft
void eraseBullet(int i){
	alignment(bullets[i][1], bullets[i][0]); // erases bullet 1
	cout << " ";
	alignment(bullets[i][3], bullets[i][2]); // erases bullet 2
	cout << " ";
}


// handles the collision between the player's space craft and enenmy crafts
// 1 collision means 1 life lost, player has a maximum of 3 lives
int collision(){
	int returnNum=0; // variable used to handle collisions
	
	// handles the collsion of enemy craft 1
	if(enemyY[0]+4==23){ 
		for(int i=0; i<4; i++){
			if(enemyX[0]>=craftPos && enemyX[0]<=craftPos+4){
				returnNum=1;
			}
		}
	}
	
	// handles the collsion of enemy craft 2
	if(enemyY[1]+4==23){
		for(int i=0; i<4; i++){
			if(enemyX[1]>=craftPos && enemyX[1]<=craftPos+4){
				returnNum=1;
			}
		}
	}
	
	if(returnNum==1){
		lives++; // the life count increments by 1 when an collsion happens
		alignment(WIN_WIDTH+6, 9); 
		cout << "Lives : " << (3-lives) << endl; // displays lives left
	}
	
	
	if(lives==3){ // when the life count becomes 3 the function returns 1 to the function calling statement
		return 1;
	}else{
		return 0;
	}
}


// handles the bullet hit part when a bullet hits an enemy craft
int bulletHit(){
	for(int i=0; i<20; i++){ // handles first subscriptof bullets[][]
		for(int j=0; j<4; j+=2){ // handles second subscriptof bullets[][]
			if(bullets[i][j]!=0){ // checks whether the bullet has been lauched or not
				if(bullets[i][j]>=enemyY[0] && bullets[i][j]<=enemyY[0]+4){ // checks whether y-coordinate of bullet is between y-coordinates of enemy craft 1
					if(bullets[i][j+1]>=enemyX[0] && bullets[i][j+1]<=enemyX[0]+4){ // checks whether x-coordinate of bullet is between x-coordinates of enemy craft 1
						eraseBullet(i); // erase bullet which hit the enemy craft
						bullets[i][j]=0; // y-coordinate of bullet becomes 0
						resetEnemy(0); // erases the enemy craft which has been hit by a bullet and a new enemy craft is generated from the top
						return 1; // returns 1 to function calling statement to say that the bullet has hit enemy craft 1
					}
				}
				
				if(bullets[i][j]>=enemyY[1] && bullets[i][j]<=enemyY[1]+4){ // checks whether y-coordinate of bullet is between y-coordinates of enemy craft 2
					if(bullets[i][j+1]>=enemyX[1] && bullets[i][j+1]<=enemyX[1]+4){ // checks whether x-coordinate of bullet is between x-coordinates of enemy craft 2
						eraseBullet(i); // erase bullet which hit the enemy craft
						resetEnemy(1); // erases the enemy craft which has been hit by a bullet and a new enemy craft is generated from the top
						bullets[i][j]=0; // y-coordinate of bullet becomes 0
						return 1; // returns 1 to function calling statement to say that the bullet has hit enemy craft 1
					}
				}
			}
		}
	}
	return 0; // returns 0 to function calling statement to say that the bullet has not hit any of the enemy crafts
}


// ends the game
void gameover(){
	system("cls"); // clears the console
	cout << endl;
	alignment(28, 11); // x-coordinate=40 and y-coordinate=11
	cout << "------------------------------" << endl;
	alignment(28, 12);
	cout << "----------Game Over-----------" << endl;
	alignment(28, 13);
	cout << "------------------------------" << endl << endl;
	alignment(25, 15);
	cout << "Press any key to go back to the menu."; 
	getch(); //tells the console to wait for some time until a key is pressed
	// when any key is pressed this screen dissappers and the main menu is displayed again
}


// displays the updated score
void updateScore(){
	alignment(WIN_WIDTH+6, 5); // x-coordinate=WIN_WIDTH+6 and y-coordinate=5
	cout << "Score : " << score << endl; // displays score
}
